/*
 * Copyright (c) 2015-2025, Inversoft Inc., All Rights Reserved
 */
jackson5Version = "3.0.1"
jacksonVersion = "2.15.4"
testngVersion = "7.5.1"

project(group: "com.inversoft", name: "restify", version: "4.3.0", licenses: ["ApacheV2_0"]) {
  workflow {
    fetch {
      cache()
      url(url: "https://repository.savantbuild.org")
      maven()
    }
    publish {
      cache()
    }
  }

  publishWorkflow {
    subversion(repository: "https://svn.savantbuild.org")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
      dependency(id: "com.inversoft:jackson5:${jackson5Version}")
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.testng:testng:${testngVersion}")
    }
  }

  publications {
    standard()
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:2.0.0")
file = loadPlugin(id: "org.savantbuild.plugin:file:2.0.0")
java = loadPlugin(id: "org.savantbuild.plugin:java:2.0.0")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:2.0.0")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:2.0.0")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:2.0.0")
pom = loadPlugin(id: "org.savantbuild.plugin:pom:2.0.0")

java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"

target(name: "clean", description: "Cleans the project") {
  java.clean()
  file.prune(dir: "target") // clean the mvn directory so we release properly
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test", "pom"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project", dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "test"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "pom", description: "Updates the pom.xml file") {
  pom.update()
}

target(name: "publish", description: "Publish to MVN repo", dependsOn: ["clean", "test"]) {
  if (new ProcessBuilder('mvn', 'clean', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}

